# Helps us create the environment file variables used in our services.
import argparse
import tomllib
import typing

from pathlib import Path


def main():
    # Set up argparse.
    parser: argparse.ArgumentParser = argparse.ArgumentParser()
    parser.add_argument('src_file', help='source file to generate into environment files')
    args: argparse.Namespace = parser.parse_args()

    src_file_path: Path = Path(args.src_file)
    print(f'üîç Reading from: {src_file_path}...')

    target_env_file_path: str = ''
    target_env_file_docker_path: str = ''
    env_file_data: dict[str, typing.Any] = {}
    env_file_docker_data: dict[str, typing.Any] = {}
    with open(src_file_path, 'rb') as f:
        src_data = tomllib.load(f)
        for k, v in src_data.items():
            if k == 'target_path':
                target_env_file_path = str(v)
            elif k == 'target_path_docker':
                target_env_file_docker_path = str(v)
            else:
                key: str = k
                value: typing.Any = v['value']

                env_file_data[key] = value

                if 'docker_var_name' in v:
                    docker_var_name: str = v['docker_var_name']
                    env_file_docker_data[docker_var_name] = value

    autogen_file_line: str = '# THIS IS AN AUTOGENERATED FILE! DO NOT EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!'

    # Create the environment file a service will use.
    print(f'üñäÔ∏è Writing to: {target_env_file_path}...')
    with open(target_env_file_path, 'w') as f:
        f.write(f'{autogen_file_line}\n')

        for k, v in env_file_data.items():
            f.write(f'{k.upper()}={v}\n')

    # Create the environment file a service will use.
    print(f'üñäÔ∏è Writing to: {target_env_file_docker_path}...')
    with open(target_env_file_docker_path, 'w') as f:
        f.write(f'{autogen_file_line}\n')

        for k, v in env_file_docker_data.items():
            f.write(f'{k.upper()}={v}\n')

    print('üéâ Done!')


if __name__ == '__main__':
    main()
